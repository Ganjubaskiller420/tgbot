import json
import sqlite3
import telebot
import configure
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import re
from db import BotDB
import tracemalloc
tracemalloc.start()

bot = telebot.TeleBot(configure.config['token'])
db_file = './requests_data.db'
categories = ["–£–†–°/–ú–∞–Ω–≥–æü•≠", "–ë–∏—Ç—Ä–∏–∫—Å24üîπ", "Live Agent‚≠ê", "Zoiperüóø", "–î—Ä—É–≥–æ–µü§ô"]
confirms = ["–ò–∑–º–µ–Ω–∏—Ç—å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]
next = ["–ù–∞–∑–∞–¥", "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"]
nextButtons = [telebot.types.KeyboardButton(nexts) for nexts in next]
categoryButtons = [telebot.types.KeyboardButton(cate) for cate in categories]
—ÅonfirmButtons = [telebot.types.KeyboardButton(confirm) for confirm in confirms]

code = None
description = None
attached_file_id = None
attached_file_type = None


def update_category(new_category):
    global category
    category = new_category


def get_user_profile_link(message):
    chat = bot.get_chat(message.chat.id)
    if chat.type == "private":
        if chat.username:
            return f"https://t.me/{chat.username}"
        else:
            return f"https://t.me/userid{chat.id}"
    else:
        return f"https://t.me/c/{str(chat.id)[4:]}"


@bot.message_handler(commands=['start'])
def start(message):
    user_name = message.from_user.first_name
    tg_link = get_user_profile_link(message)
    bot_db = BotDB(db_file)  # Create an instance of the BotDB class
    bot_db.add_user(user_name)  # Call the add_user method on the instance

    # Create a list of buttons
    # Create a reply markup with the list of buttons
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(*categoryButtons)
    # Send a message with the markup to the user
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å —Ç–µ–±–µ —Ç–≤–æ—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in categories)
def button_click(message):
    # Get the text from the button that was clicked
    button = message.text

    # Send a message to the user indicating which button was clicked
    bot.send_message(message.chat.id, f"–¢—ã –≤—ã–±—Ä–∞–ª: {button}")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(*nextButtons)
    bot.send_message(message.chat.id, "–û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                     reply_markup=markup)
    global category
    update_category(button)


# Define a function to handle registration
@bot.message_handler(func=lambda message: message.text in next or message.text in confirms)
def button_click(message):
    button = message.text
    if button == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        send_request(message)
    elif button == "–ù–∞–∑–∞–¥":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(*categoryButtons)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
    elif button == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" or button == "–ò–∑–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ 9-—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ Anydesk:")
        bot.register_next_step_handler(message, get_code)


# Define a function to handle registration

# Define a function to handle getting the code


def get_code(message):
    global code, description
    code = message.text
    if len(code) != 9 or not code.isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, get_code)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):")
    bot.register_next_step_handler(message, get_comment, code)


def get_comment(message, code):
    global description, attached_file_id, attached_file_type
    print(message.video)
    if message.photo:
        description = message.caption
        attached_file_id = message.photo[0].file_id
        attached_file_type = 'photo'
        bot.send_photo(message.chat.id,
                       caption=f"–í–∞—à –∫–æ–¥: {code}\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {description}", photo=attached_file_id)
    elif message.video:
        description = message.caption
        attached_file_id = message.video.file_id
        attached_file_type = 'video'
        bot.send_video(message.chat.id,
                       caption=f"–í–∞—à –∫–æ–¥: {code}\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {description}", video=attached_file_id)
    else:
        description = message.text
        bot.send_message(message.chat.id, f"–í–∞—à –∫–æ–¥: {code}\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {description}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*—ÅonfirmButtons)
    bot.send_message(
        message.chat.id,
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å',
        reply_markup=markup)


def send_request(message):
    global category, code, description, attached_file_id, attached_file_type
    profile_link = get_user_profile_link(message)
    chat_id = 463344693
    caption = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nAnydesk: {code}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {description}\nTelegram: {profile_link}"
    if attached_file_id:
        if attached_file_type == 'photo':
            bot.send_photo(chat_id, caption=caption, photo=attached_file_id)
        else:
            bot.send_video(chat_id, caption=caption, video=attached_file_id)
    else:
        bot.send_message(chat_id, caption)

    bot.send_message(message.chat.id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å")

    category = None
    code = None
    description = None
    attached_file_id = None
    attached_file_type = None

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('Start'))
    bot.send_message(
        message.chat.id,
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ "Start" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å:',
        reply_markup=markup)
    # Here you can save the code and comment to a


@bot.message_handler(func=lambda message: message.text == 'Start')
def start_again(message):
    start(message)


bot.polling(none_stop=True, interval=0)
